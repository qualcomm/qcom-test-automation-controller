# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries. 
#  
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the
# disclaimer below) provided that the following conditions are met:
#  
# 	* Redistributions of source code must retain the above copyright
# 	  notice, this list of conditions and the following disclaimer.
#  
# 	* Redistributions in binary form must reproduce the above
# 	  copyright notice, this list of conditions and the following
# 	  disclaimer in the documentation and/or other materials provided
# 	  with the distribution.
#  
# 	* Neither the name of Qualcomm Technologies, Inc. nor the names of its
# 	  contributors may be used to endorse or promote products derived
# 	  from this software without specific prior written permission.
#  
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Author: Biswajit Roy <biswroy@qti.qualcomm.com>

include_guard(GLOBAL)

#[=======================================================================[.rst:
GenerateVersionHeader
---------------------

This module provides functions to generate C++ version headers from CMake variables.

.. command:: generate_version_header

  Generate a C++ header file with version definitions::

    generate_version_header(
      OUTPUT_FILE <path>
      [NAMESPACE <namespace>]
      [GUARD_NAME <guard>]
      VERSIONS <var1> <var2> ...
    )

  ``OUTPUT_FILE``
    Path to the output header file (relative to CMAKE_CURRENT_BINARY_DIR)

  ``NAMESPACE``
    Optional C++ namespace to wrap the definitions

  ``GUARD_NAME``
    Optional include guard name (defaults to generated name from filename)

  ``VERSIONS``
    List of CMake variables to include as version definitions

#]=======================================================================]

function(generate_version_header)
    set(options "")
    set(oneValueArgs OUTPUT_FILE NAMESPACE GUARD_NAME)
    set(multiValueArgs VERSIONS)
    
    cmake_parse_arguments(GVH "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
    
    if(NOT GVH_OUTPUT_FILE)
        message(FATAL_ERROR "generate_version_header: OUTPUT_FILE is required")
    endif()
    
    if(NOT GVH_VERSIONS)
        message(FATAL_ERROR "generate_version_header: VERSIONS is required")
    endif()
    
    # Generate include guard name if not provided
    if(NOT GVH_GUARD_NAME)
        get_filename_component(filename "${GVH_OUTPUT_FILE}" NAME_WE)
        string(TOUPPER "${filename}" guard_base)
        string(REGEX REPLACE "[^A-Z0-9_]" "_" guard_base "${guard_base}")
        set(GVH_GUARD_NAME "${guard_base}_H")
    endif()
    
    # Prepare output file path
    if(IS_ABSOLUTE "${GVH_OUTPUT_FILE}")
        set(output_path "${GVH_OUTPUT_FILE}")
    else()
        set(output_path "${CMAKE_BINARY_DIR}/${GVH_OUTPUT_FILE}")
    endif()
    
    # Generate header content
    set(header_content "")
    string(APPEND header_content "#ifndef ${GVH_GUARD_NAME}\n")
    string(APPEND header_content "#define ${GVH_GUARD_NAME}\n")
    string(APPEND header_content "\n")
    string(APPEND header_content "/*\n")
    string(APPEND header_content " * Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.\n")
    string(APPEND header_content " *\n")
    string(APPEND header_content " * This file is auto-generated by CMake. Do not edit manually.\n")
    string(APPEND header_content " * Generated from: ${CMAKE_CURRENT_LIST_FILE}\n")
    string(APPEND header_content " */\n")
    string(APPEND header_content "\n")
    
    if(GVH_NAMESPACE)
        string(APPEND header_content "namespace ${GVH_NAMESPACE} {\n\n")
    endif()
    
    # Add version definitions
    foreach(version_var ${GVH_VERSIONS})
        if(DEFINED ${version_var})
            string(APPEND header_content "#define ${version_var} \"${${version_var}}\"\n")
        else()
            message(WARNING "generate_version_header: Variable ${version_var} is not defined")
        endif()
    endforeach()
    
    string(APPEND header_content "\n")
    
    if(GVH_NAMESPACE)
        string(APPEND header_content "} // namespace ${GVH_NAMESPACE}\n\n")
    endif()
    
    string(APPEND header_content "#endif // ${GVH_GUARD_NAME}\n")
    
    # Ensure output directory exists
    get_filename_component(output_dir "${output_path}" DIRECTORY)
    file(MAKE_DIRECTORY "${output_dir}")
    
    # Write the file
    file(WRITE "${output_path}" "${header_content}")
    
    message(STATUS "Generated version header: ${output_path}")
endfunction()

#[=======================================================================[.rst:
.. command:: configure_version_header

  Configure a version header template file::

    configure_version_header(
      INPUT_FILE <template_path>
      OUTPUT_FILE <output_path>
    )

  ``INPUT_FILE``
    Path to the input template file (with @VAR@ placeholders)

  ``OUTPUT_FILE``
    Path to the output configured file

#]=======================================================================]

function(configure_version_header)
    set(options "")
    set(oneValueArgs INPUT_FILE OUTPUT_FILE)
    set(multiValueArgs "")
    
    cmake_parse_arguments(CVH "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
    
    if(NOT CVH_INPUT_FILE)
        message(FATAL_ERROR "configure_version_header: INPUT_FILE is required")
    endif()
    
    if(NOT CVH_OUTPUT_FILE)
        message(FATAL_ERROR "configure_version_header: OUTPUT_FILE is required")
    endif()
    
    # Prepare output file path
    if(IS_ABSOLUTE "${CVH_OUTPUT_FILE}")
        set(output_path "${CVH_OUTPUT_FILE}")
    else()
        set(output_path "${CMAKE_CURRENT_BINARY_DIR}/${CVH_OUTPUT_FILE}")
    endif()
    
    # Configure the file
    configure_file("${CVH_INPUT_FILE}" "${output_path}" @ONLY)
    
    message(STATUS "Configured version header: ${output_path}")
endfunction()
